node("project-slave"){
  stage("Get Repo") {
    checkout scm
  }
  
  stage("Create Docker Image") {
    //Dockerfile
    app = docker.build("carmitbe1/opsschool-project")
  }

  stage("verify Docker Image") 
  {
    sh "docker images"
  }

  stage("Push to DockerHub") {
    withDockerRegistry(credentialsId: 'dockerhub.carmitbe1', url: '') 
    {
      app.push()
    }
  }

  stage("Build") {
    sh """
      tee /home/ubuntu/pod.yml <<-'EOF'
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: opsschool-project
  labels:
    app: opsschool-project
spec:
  replicas: 2
  selector:
    matchLabels:
      app: opsschool-project
  template:
    metadata:
      labels:
        app: opsschool-project
    spec:     
      containers:
      - name: opsschool-project
        image: carmitbe1/opsschool-project
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:  
  name: opsschool-project
spec:
  selector:    
    app: opsschool-project
  type: LoadBalancer
  ports:  
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30036
    protocol: TCP
EOF
            """
      echo "build"           
  }
  stage("Deploy") {                
    script {
      try{
        //kubernetesDeploy configs: 'ttt.yml', kubeConfig: [path: ''], kubeconfigId: 'k8s-test', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
        sh """kubectl apply -f /home/ubuntu/pod.yml > /home/ubuntu/startPod.log"""
        echo "try"
      }catch(error){
        echo "catch"                  
      }
    }        
  }
  stage("Test") {
    sh """kubectl get pods > /home/ubuntu/getPods.log"""
    sh """kubectl get svc| grep project| awk '{print $3}' > /home/ubuntu/lb.txt""" 
    load_balancer = sh(script: "kubectl get svc| grep project| awk '{print $3}", returnStdout: true)
    url = "http://${load_balancer}"
    echo "test"
    int status = sh(script: "curl -sLI -w '%{http_code}' $url -o /dev/null", returnStdout: true)
    if (status != 200 && status != 201) {
    error("Returned status code = $status when calling $url")
}

    //test_result = sh """curl http://load-balancer"""
    
  }
}
